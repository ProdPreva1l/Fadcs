import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'org.ajoberstar.grgit' version '5.2.2'
    id 'io.github.goooler.shadow' version '8.1.7'
}

group = 'info.preva1l'
version = "1.0.0${versionMetadata()}"

ext {
    set 'version', version.toString()
}

allprojects {
    apply plugin: 'io.github.goooler.shadow'
    apply plugin: 'maven-publish'
    apply plugin: 'java'

    sourceCompatibility = 17
    targetCompatibility = 17

    compileJava.options.encoding = 'UTF-8'
    javadoc.options.encoding = 'UTF-8'
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.jetbrains:annotations:24.0.0'
        compileOnly 'org.projectlombok:lombok:1.18.32'
        annotationProcessor 'org.projectlombok:lombok:1.18.32'
        annotationProcessor 'org.jetbrains:annotations:24.0.0'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'

        testCompileOnly 'org.jetbrains:annotations:24.1.0'
        testCompileOnly 'org.projectlombok:lombok:1.18.32'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
    }

    test {
        useJUnitPlatform()
    }

    processResources {
        filesMatching(['**/*.json', '**/*.yml']) {
            filter ReplaceTokens as Class, beginToken: '${', endToken: '}',
                    tokens: rootProject.ext.properties
        }
    }
}

subprojects {
    version rootProject.version
    archivesBaseName = "${rootProject.name}-${project.name.capitalize()}"

    task generateJavadoc(type: Javadoc) {
        sourceSets.main.java.srcDirs.each { dir ->
            source(dir)
        }
        classpath += configurations.compileClasspath
        options.addStringOption('Xdoclint:none', '-quiet')
        destinationDir = file("$buildDir/docs/javadoc")
    }

    task javadocJar(type: Jar, dependsOn: generateJavadoc) {
        dependsOn generateJavadoc
        archiveFileName = "${rootProject.name}-${project.name.capitalize()}-javadoc.jar"
        from generateJavadoc.destinationDir
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        dependsOn classes
        archiveFileName = "${rootProject.name}-${project.name.capitalize()}-sources.jar"
        from sourceSets.main.allSource
    }

    shadowJar {
        destinationDirectory.set(file("$rootDir/target"))
        archiveClassifier.set('')
        //minimize()
    }

    jar.dependsOn shadowJar
    clean.delete "$rootDir/target"
}

logger.lifecycle("Building Fadcs ${version}")

@SuppressWarnings('GrMethodMayBeStatic')
def versionMetadata() {
    if (grgit == null) {
        return '-' + System.getenv("GITHUB_RUN_NUMBER") ? 'build.' + System.getenv("GITHUB_RUN_NUMBER") : 'unknown'
    }

    // Get if there is a tag for this commit
    def tag = grgit.tag.list().find { it.commit.id == grgit.head().id }
    if (tag != null) {
        return ''
    }

    // Otherwise, get the last commit hash and if it's a clean head
    return '-' + grgit.head().abbreviatedId + (grgit.status().clean ? '' : '-indev')
}